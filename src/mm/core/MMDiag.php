<?php

namespace mondrakeNG\mm\core;

/**  
 * mondrake diagnostic class. Handles all diagnostic messages generated by mondrake core functions.
 */
class MMDiag {

    private static $msgs = array();
    private $timers = array();

  
    public function sLog($severity, $className, $id, $params)    {
        $msg = new MMDiagMsg;
    
        $now = new MMTimer;
        $now->timenow();
        
        $msg->severity = $severity; 
        $msg->className = $className;
        $msg->id = $id;
        $msg->time = $now->tSec;
        $msg->uTime = $now->tUSec;

        if(isset($params['#elapsed']))    {
            //$params['#text'] .= ' Elapsed: @elapsed';
            $this->timers[$params['#elapsed']]->partial();
            $msg->elapsed = $params['@elapsed'] = $this->timers[$params['#elapsed']]->elapsed;
        }
        
        $msg->text = $params['#text'];
        
        $msg->fullText = $params['#text'];
        foreach($params as $a => $b) {
            if($a <> '#text' and $a <> '#elapsed')
                $msg->fullText = str_replace($a, $b, $msg->fullText);
        }        
        
        $msg->params = $params;

        self::$msgs[] = $msg;
    } 
    
    public function get($cleanUp = TRUE)    {
        $tmp = self::$msgs;
        if($cleanUp)
            self::$msgs = array();
        return $tmp;
    }
    
    public function wipe($minSeverity = 0)    {
        $c = array();
        foreach (self::$msgs as $a => $msg)    {
            if ($msg->severity > $minSeverity)
                $c[] = $msg;
        }
        self::$msgs = $c;
        //$this->timers = null;
    }
    
    public function startWatch($id)    {
        if(!isset($this->timers[$id]))    {
            $this->timers[$id] = new MMTimer;
        }
        $this->timers[$id]->start();
        return $this->timers[$id]->startTime;
    }
    
    public function stopWatch($id)    {
        if(!isset($this->timers[$id]))    {
            return null;
        }
        $this->timers[$id]->stop();
        return $this->timers[$id]->stopTime;
    }

    public function elapsed($id)    {
        if(!isset($this->timers[$id]))    {
            return 0;
        }
        return $this->timers[$id]->elapsed;
    }
}
